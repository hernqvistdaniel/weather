{"version":3,"sources":["WeatherHeader.js","DayForecast.js","WeekForecast.js","WeeklyBar.js","App.js","serviceWorker.js","index.js"],"names":["WeatherHeader","state","isLoaded","id","name","time","temperature","summary","summarySub","wind","coords","sunUp","sunDown","icon","celsiusToFahrenheit","degreesInCelsius","fetchWeather","window","navigator","geolocation","getCurrentPosition","position","_this","setState","geoRequestURI","concat","latitude","longitude","fetch","then","res","json","result","dt","main","temp","weather","description","speed","sys","sunrise","sunset","error","this","react_default","a","createElement","message","className","Date","toLocaleTimeString","alt","src","props","celsius","toFixed","toLocaleString","slice","role","React","Component","DayForecast","_this2","city","list","hoursForecast","_this3","hours","i","push","length","map","data","index","key","dt_txt","WeekForecast","daily","days","toDateString","temperatureHigh","temperatureLow","windSpeed","WeeklyBar","App","toggleUnit","src_WeatherHeader","onClick","src_DayForecast","src_WeeklyBar","src_WeekForecast","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.00fe2806.chunk.js","sourcesContent":["import React from \"react\";\n\nclass WeatherHeader extends React.Component {\n\n  state = {\n    isLoaded: false,\n    id: null,\n    name: '',\n    time: '',\n    temperature: null,\n    summary: '',\n    summarySub: '',\n    wind: null,\n    coords: [],\n    sunUp: null,\n    sunDown: null,\n    icon: '',\n  }\n\n  celsiusToFahrenheit = (degreesInCelsius) => {\n    return degreesInCelsius * (9/5) + 32;\n  }\n\n  componentDidMount() {\n    this.fetchWeather()\n  }\n\n  fetchWeather = () => {\n    \n    const APIkey = '5e158b3eb258eaa205c563444bddb6e2';\n    \n    window.navigator.geolocation.getCurrentPosition(\n      position => {\n        this.setState({\n          coords: position.coords\n        })\n        \n        let geoRequestURI = `https://api.openweathermap.org/data/2.5/weather?lat=${this.state.coords.latitude}&lon=${this.state.coords.longitude}&APPID=${APIkey}&units=metric`;\n           \n      fetch(geoRequestURI)\n        .then(res => res.json())\n        .then(\n          (result) => {\n            this.setState({\n              isLoaded: true,\n              id: result.id,\n              name: result.name,\n              time: result.dt,\n              temperature: result.main.temp,\n              summary: result.weather[0].main,\n              summarySub: result.weather[0].description,\n              wind: result.wind.speed,\n              sunUp: result.sys.sunrise,\n              sunDown: result.sys.sunset,\n              icon: result.weather[0].icon\n            });\n          },\n          (error) => {\n            this.setState({\n              isLoaded: true,\n              error\n            });\n          }\n        )\n        }\n    )\n  }\n\n  render() {\n   \n\n    if (this.state.error) {\n      return <div>Error: {this.state.error.message}</div>;\n    } else if (!this.state.isLoaded) {\n      return (\n        <div id=\"spinner\">\n        <div className=\"spinner-border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n        </div>\n      );\n    } else {\n      return (\n        (\n          <div id=\"currentDiv\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">{this.state.name}</h5>\n              <h6 className=\"card-subtitle mb-2 text-muted\">Time: <em>{new Date(this.state.time).toLocaleTimeString()}</em></h6>\n              <p className=\"card-text\">\n                The weather is: <strong>{this.state.summary}</strong> ({this.state.summarySub})\n              </p>\n              <img className=\"icon\" alt=\"Icon displaying current weather.\" src={`http://openweathermap.org/img/w/${this.state.icon}.png`} />\n              <br />\n              <p className=\"card-text\">\n                With a temperature of: <strong>{this.props.celsius ? this.state.temperature.toFixed() : this.celsiusToFahrenheit(this.state.temperature).toFixed()}{this.props.celsius ? ' °C' : ' °F'}</strong>\n              </p>\n              <p className=\"card-text\">\n                And a windspeed of <strong>{this.state.wind} m/s</strong>\n              </p>\n              <p className=\"card-text\">\n                The sun will rise at: <strong>{new Date(this.state.sunUp * 1000).toLocaleString().slice(10, 16)}</strong>\n              </p>\n              <p className=\"card-text\">\n                And set at: <strong>{new Date(this.state.sunDown * 1000).toLocaleString().slice(10, 16)}</strong>\n              </p>\n            </div>\n          </div>\n          </div>\n        )\n      );\n    }\n  }\n}\n\nexport default WeatherHeader;\n","import React from \"react\";\n\nclass DayForecast extends React.Component {\n  state = {\n    isLoaded: false,\n    id: null,\n    name: \"\",\n    summary: [],\n    coords: [],\n  };\n\n  celsiusToFahrenheit = (degreesInCelsius) => {\n    return degreesInCelsius * (9/5) + 32;\n  }\n\n  componentDidMount() {\n    const APIkey = \"5e158b3eb258eaa205c563444bddb6e2\";\n\n    window.navigator.geolocation.getCurrentPosition(position => {\n      this.setState({\n        coords: position.coords\n      });\n\n      let geoRequestURI = `https://api.openweathermap.org/data/2.5/forecast?lat=${this.state.coords.latitude}&lon=${this.state.coords.longitude}&APPID=${APIkey}&units=metric`;\n\n      fetch(geoRequestURI)\n        .then(res => res.json())\n        .then(\n          result => {\n            this.setState({\n              isLoaded: true,\n              name: result.city.name,\n              summary: result.list,\n              id: result.id\n            });\n          },\n          error => {\n            this.setState({\n              isLoaded: true,\n              error\n            });\n          }\n        );\n    });\n  }\n\n  render() {\n    let hours = this.state.summary;\n    let result = [];\n    \n    for (let i = 0; i < 8; i++) {\n      if (hours[i]) {\n        result.push(hours[i]);\n      }\n    }\n\n    let hoursForecast;\n    if (result.length > 0) {\n      hoursForecast = result.map((data, index) => {\n        return (\n          <div className=\"dailyMinis\" key={index}>\n          <div id=\"iconDiv\">\n            <img\n              id=\"icon\"\n              src={`http://openweathermap.org/img/w/${data.weather[0].icon}.png`}\n              alt=\"Icon displaying weather\"\n            />\n              </div>\n              <p><strong>{data.dt_txt.slice(10, 16)}</strong></p>\n              <p><strong>{this.props.celsius ? data.main.temp.toFixed() : this.celsiusToFahrenheit(data.main.temp).toFixed()}{this.props.celsius ? ' °C' : ' °F'}</strong></p>\n          </div>\n        );\n      });\n    }\n    return (\n      <div id=\"dayDivReturn\">\n        {hoursForecast}\n      </div>\n      ) \n  }\n}\n\nexport default DayForecast;\n","import React from \"react\";\n\nclass WeekForecast extends React.Component {\n  state = {\n    isLoaded: false,\n    id: null,\n    summary: [],\n    coords: [],\n  };\n\n  celsiusToFahrenheit = (degreesInCelsius) => {\n    return degreesInCelsius * (9/5) + 32;\n  }\n\n  componentDidMount() {\n    const APIkey = \"edd839fe6f8824a69560462761ca9d86\";\n\n    window.navigator.geolocation.getCurrentPosition(position => {\n      this.setState({\n        coords: position.coords\n      });\n\n      let geoRequestURI = `https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/${APIkey}/${this.state.coords.latitude},${this.state.coords.longitude}?exclude=currently,minutely,hourly,alerts,flags&units=si`;\n\n      fetch(geoRequestURI)\n        .then(res => res.json())\n        .then(\n          result => {\n            this.setState({\n              isLoaded: true,\n              summary: result.daily.data\n            });\n          },\n          error => {\n            this.setState({\n              isLoaded: true,\n              error\n            });\n          }\n        );\n    });\n  }\n\n  render() {\n    let days = this.state.summary;\n    let result = [];\n\n    for (let i = 0; i < 7; i++) {\n      if (days[i]) {\n        result.push(days[i]);\n      }\n    }\n\n    if (this.state.error) {\n      return <div>Error: {this.state.error.message}</div>;\n    } else if (!this.state.isLoaded) {\n      return (\n        <div id=\"spinner\">\n        <div className=\"spinner-border\" role=\"status\">\n        </div>\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      );\n    } else {\n    let WeekForecast;\n    if (result.length > 0) {\n      WeekForecast = result.map((data, index) => {\n        return (\n          <div id=\"weekDiv\" key={index}>\n            <div id=\"weekContainer\">\n\n              \n              {/* Remove this? cause it makes no sense to have an icon for a summary of a day\n              <img\n                src={`http://openweathermap.org/img/w/${data.icon}.png`}\n                className=\"card-img-top dailyIcon\"\n                alt=\"Icon displaying weather\"\n              /> */}\n\n              <p className=\"card-title\">\n                <strong>{new Date(data.time * 1000).toDateString().slice(0, 10)}</strong>\n              </p>\n              <p className=\"card-text\">\n                <strong>{data.summary.slice(0, 30)}...</strong>\n              </p>\n              <p className=\"card-text\">\n                Temp High: <strong>{this.props.celsius ? data.temperatureHigh.toFixed() : this.celsiusToFahrenheit(data.temperatureHigh).toFixed()}{this.props.celsius ? ' °C' : ' °F'}</strong>\n              </p>\n              <p className=\"card-text\">\n                Temp Low: <strong>{this.props.celsius ? data.temperatureLow.toFixed() : this.celsiusToFahrenheit(data.temperatureLow).toFixed()}{this.props.celsius ? ' °C' : ' °F'}</strong>\n              </p>\n              <p className=\"card-text\">\n                Wind: <strong>{data.windSpeed.toFixed()} m/s</strong>\n              </p>\n            </div>\n          </div>\n        );\n      });\n    }\n    return <div id=\"weekDivReturn\">{WeekForecast}</div>;\n  }\n}\n}\n\nexport default WeekForecast;\n","import React from 'react';\n\nfunction WeeklyBar () {\n\n    return (\n      <div id=\"weeklyBarDiv\">\n        <nav className=\"navbar navbar-light bg-light\">\n          <span className=\"span\">Forecast for the next week:</span>\n        </nav>\n      </div>\n    );  \n}\n\nexport default WeeklyBar;","import React from 'react';\nimport WeatherHeader from './WeatherHeader';\n// import Navbar from './Navbar';\nimport DayForecast from './DayForecast';\nimport WeekForecast from './WeekForecast';\nimport WeeklyBar from './WeeklyBar';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nclass App extends React.Component {\n  state = { celsius: true }\n  \n  \n\n  toggleUnit = () => {\n    this.setState({ celsius: !this.state.celsius})\n  }\n  \n  render() {\n    return (\n      <div id=\"appDiv\">\n        {/* <Navbar /> */}\n        <WeatherHeader celsius={this.state.celsius} />\n        <button onClick={this.toggleUnit}>celsius/fahrenheit</button>\n        <DayForecast celsius={this.state.celsius} />\n        <WeeklyBar celsius={this.state.celsius} />\n        <WeekForecast celsius={this.state.celsius} />\n      </div>\n    )  \n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}